' Generated by UML Generator
' Encoded: XLLDJnin4BtdLrWvEKqMfTowQX59eIKI54HAEI0EpkvqOyLhRsqluKFqjzTVkx5HsbuIU_ncF7xpPlPOQI9rMxE1sb3U44bgL32Yr4nhILUjXaKX-98-0veErhG4L51PC1WC70hDXJw3LbAbQQ7Gom2Xtp97ruINeaQV48TjsE2HESioypEkGCz1wGln07WbY2np4yRyJT1Aw2j6da3-8Ao5756kH-xN-lwalBobd5DUNSev4uL9kDeJf74HOkVNBjklf0QNPAPoj2m8vo3jha_PRcYHemLlMlrv3SN60rRhF7sgDMuDq2GKmLfAStIpkD6KKKt1eUBaxBuoELo84lft-NpVvyW_VMSwZ4s66lNDk9wR-qtkfZYyCWI_eE4jOImx7KxGyFemEpcqYyj6qxfLw4hI6gnXtjOh1YjmcxFPEVemdKxj-ePfARXTBJTF7BHTdG0qQ6uAO3UtH2iFk1OhKOXcY5xxIbe-SVAW2LAUrfvVLtTJSlyK-mJCk-BuPmI0uTUTmgEbc5Tsqq4IhEg2EK8KxW_lxkrn8O5e20ZSzDUg7MpKCUizrcrD-FTMSboqKjf5RgGe611ka0-2bg42_yECNJVXpf3exfHNb0VrlHYSKT4hQam-HbMa18cZCFrvJIZ7H5PfxcdmdGHzyBU2StlRmRtYNErsRad_TELQjhLZTYObURAY-xZW6YgGHzPvIsrfyTl-SX6IBE8RtQcR0s4fzDeAfRztJDMNbZ4RDb3hZRC7GXan0bx-Qea4BCKsYAqGhDDIv6444f2r6GyrSDrfqrdtU3ZvMPeSoJYMMtyMNdjtxqHZpVzA9-75YyqJmoDPkt6ZZF3ZP3nPtWN7wD5Vx1EKnXY5z5mt9Kznk9ZUFiDuuEsRa2wd68JtzRczDSW4rvG7Lchoc8xo6FQMgcXwkZp6haNcZF3DkUcVk4ly2P5nlwNVeuE3ez07RlA_ox9qilVMTBRtvcYwzxPul4V-oILXR4UTkGFv7jbbTWoyDD_VFm
' URL: http://www.plantuml.com/plantuml/uml/XLLDJnin4BtdLrWvEKqMfTowQX59eIKI54HAEI0EpkvqOyLhRsqluKFqjzTVkx5HsbuIU_ncF7xpPlPOQI9rMxE1sb3U44bgL32Yr4nhILUjXaKX-98-0veErhG4L51PC1WC70hDXJw3LbAbQQ7Gom2Xtp97ruINeaQV48TjsE2HESioypEkGCz1wGln07WbY2np4yRyJT1Aw2j6da3-8Ao5756kH-xN-lwalBobd5DUNSev4uL9kDeJf74HOkVNBjklf0QNPAPoj2m8vo3jha_PRcYHemLlMlrv3SN60rRhF7sgDMuDq2GKmLfAStIpkD6KKKt1eUBaxBuoELo84lft-NpVvyW_VMSwZ4s66lNDk9wR-qtkfZYyCWI_eE4jOImx7KxGyFemEpcqYyj6qxfLw4hI6gnXtjOh1YjmcxFPEVemdKxj-ePfARXTBJTF7BHTdG0qQ6uAO3UtH2iFk1OhKOXcY5xxIbe-SVAW2LAUrfvVLtTJSlyK-mJCk-BuPmI0uTUTmgEbc5Tsqq4IhEg2EK8KxW_lxkrn8O5e20ZSzDUg7MpKCUizrcrD-FTMSboqKjf5RgGe611ka0-2bg42_yECNJVXpf3exfHNb0VrlHYSKT4hQam-HbMa18cZCFrvJIZ7H5PfxcdmdGHzyBU2StlRmRtYNErsRad_TELQjhLZTYObURAY-xZW6YgGHzPvIsrfyTl-SX6IBE8RtQcR0s4fzDeAfRztJDMNbZ4RDb3hZRC7GXan0bx-Qea4BCKsYAqGhDDIv6444f2r6GyrSDrfqrdtU3ZvMPeSoJYMMtyMNdjtxqHZpVzA9-75YyqJmoDPkt6ZZF3ZP3nPtWN7wD5Vx1EKnXY5z5mt9Kznk9ZUFiDuuEsRa2wd68JtzRczDSW4rvG7Lchoc8xo6FQMgcXwkZp6haNcZF3DkUcVk4ly2P5nlwNVeuE3ez07RlA_ox9qilVMTBRtvcYwzxPul4V-oILXR4UTkGFv7jbbTWoyDD_VFm
' Generated on: 2025-10-20T15:41:46.289710700

@startuml
skinparam classAttributeIconSize 0
hide circle

class BotHeuristics {
  ~r: Random = new Random()
  --
  +getBestMove(board: Board, botPlayerValue: int): int
  -findWinningOrBlockingMove(board: Board, player: int): int
}

class Game {
  -s: Scanner
  -r: Random
  -ic: InputChecker
  -bh: BotHeuristics
  -wc: WinChecker
  -uii: UIUtilities
  -board: Board
  -gameMode: int
  -player1: Player
  -player2: Player
  -botsNameList: String = { "Wall-E", "R2-D2", "Optimus Prime", "Bumblebee", "HAL 9000", "Ultron", "Skynet", "Deep Blue", "Watson", "Robocop" }
  --
  +Game(gameMode: int, scanner: Scanner)
  -getPlayerName(n: int): String
  -getBotName(existingName: String): String
  -setPlayersNames(): String[]
  -createPlayers(playerNames: String[]): Player[]
  -humanTurn(currTurn: boolean): void
  -botTurn(currTurn: boolean): void
  +start(): void
}

class GameEngine {
  -{static} printHeader(): void
  +{static} main(args: String[]): void
}

class WinChecker {
  -board: Board
  -boardSize: int
  --
  +WinChecker(board: Board)
  -getSums(): ArrayList<Integer>
  +winner(): int
}

class Board {
  -board: int
  --
  +Board()
  +Board(other: Board)
  +isFull(): boolean
  +isAvailableSquare(row: int, col: int): boolean
  +setSquare(movement: int, square: int): boolean
  +getBoardString(): String
  +getBoard(): int[][]
  +getSquare(row: int, col: int): int
}

class Player {
  -name: String
  -isBot: boolean
  --
  +Player(name: String)
  +Player(name: String, isBot: boolean)
  +getName(): String
  +isBot(): boolean
}

class InputChecker {
  -s: Scanner
  --
  +InputChecker(scanner: Scanner)
  +getInteger(min: int, max: int): int
  +getInteger(): int
}

class UIUtilities {
  +printBlankLine(): void
  +printBar(): void
}

BotHeuristics ..> Board
Game *-- InputChecker
Game *-- BotHeuristics
Game *-- WinChecker
Game *-- UIUtilities
Game *-- Board
Game *-- Player
WinChecker *-- Board
Board ..> Board
@enduml